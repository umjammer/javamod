/*
 * @(#) ModConstants.java
 *
 * Created on 02.08.2020 by Daniel Becker
 * 
 *-----------------------------------------------------------------------
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *----------------------------------------------------------------------
 */
package de.quippy.javamod.multimedia.mod;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

/**
 * @author Daniel Becker
 * @since 02.08.2020
 */
public class ModConstants
{
	/**
	 * Constructor for ModConstants
	 * never used!
	 */
	public ModConstants()
	{
		super();
	}

	/**
	 * Some constants
	 */
	// The C-4 period / noteindex and the basic freq with protracker mods
	public static final int BASEFREQUENCY = 8363;
	public static final int BASEPERIOD = 428;
	public static final int BASENOTEINDEX = 48;

	//The frequency tables supported
	public static final int STM_S3M_TABLE 	= 0x01;
	public static final int IT_LINEAR_TABLE = 0x02;
	public static final int IT_AMIGA_TABLE  = 0x04;
	public static final int AMIGA_TABLE 	= 0x08;
	public static final int XM_AMIGA_TABLE 	= 0x10;
	public static final int XM_LINEAR_TABLE = 0x20;

	// Mod Types
	public static final int MODTYPE_MOD		= 0x01;
	public static final int MODTYPE_XM		= 0x02;
	public static final int MODTYPE_STM		= 0x04;
	public static final int MODTYPE_S3M		= 0x08;
	public static final int MODTYPE_IT		= 0x10;
	public static final int MODTYPE_OMPT	= 0x20; // OpenModPlugTracker
	public static final int MODTYPE_MPT		= 0x40; // ModPlugTracker - LEGACY
	public static final int MODTYPE_FASTTRACKER = MODTYPE_MOD | MODTYPE_XM;
	public static final int MODTYPE_SCREAMTRACKER = MODTYPE_S3M | MODTYPE_STM;
	public static final int MODTYPE_IMPULSETRACKER = MODTYPE_IT | MODTYPE_SCREAMTRACKER;
	
	// With MODs you might want to enable E8x effect
	public static final boolean SUPPORT_E8x_EFFECT = false;

	// Append for compatibility export to tracker name
	public static final String COMPAT_MODE = " (compatibility export)";

	// PreAmp constants
	public static final int PREAMP_SHIFT		= 8;
	public static final int MAX_MIXING_PREAMP	= 1 << PREAMP_SHIFT; // the maximum sample preAmp
	public static final int MIN_MIXING_PREAMP	= (MAX_MIXING_PREAMP / 5) & 0xFFF0; // minimum value - used for e.g. ProTracker with more than 4 channels

	// Log tables for pre-amp - legacy MPT
	public static final int [] PreAmpTable = new int[]
	{
		0x60, 0x60, 0x60, 0x70,	// 0-7
		0x80, 0x88, 0x90, 0x98,	// 8-15
		0xA0, 0xA4, 0xA8, 0xAC,	// 16-23
		0xB0, 0xB4, 0xB8, 0xBC,	// 24-31
	};

	// Panning values for old ProTracker and STMs / S3Ms
	public static final int OLD_PANNING_LEFT	= 0;								// 0: full left, 64: quarter left
	public static final int OLD_PANNING_RIGHT	= 256 - OLD_PANNING_LEFT;
	// Special panning values for S3M and IT
	public static final int CHANNEL_IS_MUTED	= 0x80<<2;							// IT and S3M use this
	public static final int CHANNEL_IS_SURROUND = 100<<2;							// IT uses this (YES, not hex!)
	
	// Volume constants
	public static final int MAXGLOBALVOLUME		= 128; 								// the maximum global volume at mod loading
	public static final int MAXSAMPLEVOLUME		= 64;  								// the sample maximum global volume at mod loading
	public static final int MAX_SAMPLE_VOL		= MAXSAMPLEVOLUME;					// and its corresponding max
	public static final int MIN_SAMPLE_VOL		= 0;								// and min values (in this case "zero" is 3)
	public static final int VOLUMESHIFT			= 6; 								// this is the shift done in processEnvelopes
	public static final int MAXCHANNELVOLUME	= MAX_SAMPLE_VOL << VOLUMESHIFT;	// plus the max (reflecting VOLUME_INIT_SHIFT)
	public static final int MINCHANNELVOLUME	= 0;								// and min value for clipping ((1<<VOLUMESHIFT)-1: could be a better value
	// This is the final SHIFT before rendering into buffers for reducing VOLUMESHIFT (64), VOLUME_INIT_SHIFT (4), MAXCHANNELVOLUME (64) -1 because of extraAttenuation of 0 for OMPT
	public static final int MAXVOLUMESHIFT = VOLUMESHIFT + 6 - 1;  
	
	public static final int MAXFADEOUTVOLSHIFT = 16; // This is for loop fade out *and* NOTE_FADE!!!
	public static final int MAXFADEOUTVOLUME = 1<<MAXFADEOUTVOLSHIFT;
	public static final int FADEOUT_SUB = 0x100;
	
	// TuningPos shift for fraction
	public static final int SHIFT		= 16;
	public static final int SHIFT_MAX	= 1<<SHIFT;
	public static final int SHIFT_MASK	= SHIFT_MAX-1;

	public static final int PERIOD_SHIFT = 4;
	// Interpolation shift samples and clipping
	public static final int  SAMPLE_SHIFT = 12;
	public static final long CLIPP32BIT_MAX = 0x000000007FFFFFFFL;
	public static final long CLIPP32BIT_MIN = 0xFFFFFFFF80000000L;

	// Interpolation modes
	public static final int INTERPOLATION_NONE			= 0;
	public static final int INTERPOLATION_LINEAR		= 1;
	public static final int INTERPOLATION_CUBIC			= 2;
	public static final int INTERPOLATION_KAISER		= 3;
	public static final int INTERPOLATION_WINDOWSFIR	= 4;

	public static final int INTERWEAVE_FRAC		= 4;
	public static final int INTERWEAVE_LEN		= 1<<INTERWEAVE_FRAC;
	
	// The volume ramping constants
	public static final int VOLRAMPLEN_FRAC		= 12;
	public static final int VOLRAMPLEN			= 1<<VOLRAMPLEN_FRAC;
	public static final int VOLRAMPLEN_UP_YS	= 363;
	public static final int VOLRAMPLEN_DOWN_YS	= 952;
	
	public static enum PanBits { Pan4Bit, Pan6Bit, Pan8Bit } 
	
	// Constants for different supported samples
	public static final int SM_PCMS			= 	0x0001;					// PCM 8 Bit Signed
	public static final int SM_PCMU			= 	0x0002;					// PCM 8 Bit unsigned
	public static final int SM_PCMD			=	0x0004;					// PCM 8 Bit delta values
	public static final int SM_16BIT		=	0x0008;					// 16 BIT
	public static final int SM_BigEndian	=	0x0010;					// 16 Bit in BigEndian order 
	public static final int SM_STEREO		= 	0x0020;					// STEREO
	// IT Packed (>2.14)
	public static final int SM_IT214		=	0x0040;					// IT 2.14 compressed
	public static final int SM_IT215		=	0x0080;					// IT 2.15 compressed
	public static final int SM_PTM8Dto16 	=	0x0100;					// IT PTM8to16
	// XM ADPCM ModPlug
	public static final int SM_ADPCM		=	0x0200;					// ModPlug ADPCM

	// Loop Types
	public static final int LOOP_ON						=	0x01;
	public static final int LOOP_SUSTAIN_ON				=	0x02;
	public static final int LOOP_IS_PINGPONG			=	0x04;
	public static final int LOOP_SUSTAIN_IS_PINGPONG	=	0x08;

	// NNA Types - are defined by IT instrument, wrapped for readability
	public static final int NNA_CUT 		= 0x00;
	public static final int NNA_CONTINUE 	= 0x01;
	public static final int NNA_OFF 		= 0x02;
	public static final int NNA_FADE 		= 0x03;
	
	// DCT types (Duplicate Check Types)
	public static final int DCT_NONE		= 0x00;
	public static final int DCT_NOTE		= 0x01;
	public static final int DCT_SAMPLE		= 0x02;
	public static final int DCT_INSTRUMENT	= 0x03;
	public static final int DCT_PLUGIN		= 0x04;

	// DNA types (Duplicate Note Action)
	public static final int DNA_CUT			= 0x00;
	public static final int DNA_OFF			= 0x01;
	public static final int DNA_FADE		= 0x02;

	// KeyOff and NoteCut values
	public static final int NO_NOTE			=  0;
	public static final int KEY_OFF			= -1;
	public static final int NOTE_CUT		= -2;
	public static final int NOTE_FADE		= -3;
	public static final int NOTE_PC			= -4; // TODO: Param Control 'note'. Changes param value on first tick.
	public static final int NOTE_PCS		= -5; // TODO: Param Control (Smooth) 'note'. Interpolates param value during the whole row.

	// Filter Modes
	public static final int  FLTMODE_LOWPASS		= 0;
	public static final int  FLTMODE_HIGHPASS		= 1;
	public static final int  FLTMODE_BANDPASS		= 2;
	public static final int  FLTMODE_UNCHANGED		= 0xFF; // Definition of MPT Unchanged filter
	public static final int  FILTER_SHIFT_BITS		= 13;
	public static final long FILTER_PRECISION		= 1L << FILTER_SHIFT_BITS;
	public static final long HALF_FILTER_PRECISION	= FILTER_PRECISION>>1; 
	public static final int  FILTER_PREAMP_BITS		= 8;
	public static final long FILTER_CLIP_MAX		= CLIPP32BIT_MAX<<(FILTER_PREAMP_BITS + 1);
	public static final long FILTER_CLIP_MIN		= CLIPP32BIT_MIN<<(FILTER_PREAMP_BITS + 1);

	// Module flags
	public static final int SONG_EMBEDMIDICFG	= 0x00001;
	public static final int SONG_FASTVOLSLIDES	= 0x00002;
	public static final int SONG_ITOLDEFFECTS	= 0x00004;
	public static final int SONG_ITCOMPATMODE	= 0x00008;
	public static final int SONG_LINEARSLIDES	= 0x00010;
	public static final int SONG_EXFILTERRANGE	= 0x00020;
	public static final int SONG_AMIGALIMITS	= 0x00040;
	public static final int SONG_ISSTEREO		= 0x00080;
	public static final int SONG_USEINSTRUMENTS = 0x00100;
	public static final int SONG_ST2VIBRATO		= 0x00200;
	public static final int SONG_ST2TEMPO		= 0x00400;
	public static final int SONG_AMIGASLIDES	= 0x00800;
	public static final int SONG_VOL0MIXOPTI	= 0x01000;
	public static final int SONG_USEMIDIPITCH	= 0x02000;
	public static final int SONG_S3M_GUS		= 0x80000;
	
	// Player flags
	public static final int PLAYER_LOOP_DEACTIVATED = 0x00;
	public static final int PLAYER_LOOP_FADEOUT 	= 0x01;
	public static final int PLAYER_LOOP_IGNORE 		= 0x02;
	public static final int PLAYER_LOOP_LOOPSONG 	= 0x04;
	
	// Tempo Modes for ModplugTracker files
	public static final int TEMPOMODE_CLASSIC		= 0x00;
	public static final int TEMPOMODE_ALTERNATIVE	= 0x01;
	public static final int TEMPOMODE_MODERN		= 0x02;
	public static final String [] TEMPOMODE_STRING	= { "Classic", "Alternative", "Modern" };
	// TempoSwing Unity
	public static final int TEMPOSWING_UNITY		= 1<<24;
	
	/**
	 * This is used for translating periods into note names, for the
	 * patternElement.toString() method, and for translating noteindex into
	 * periods
	 */
	public static final int [] noteValues =
	{
		 6848, 6464, 6096, 5760, 5424, 5120, 4832, 4560, 4304, 4064, 3840, 3624,
		 3424, 3232, 3048, 2880, 2712, 2560, 2416, 2280, 2152, 2032, 1920, 1812,
		 1712, 1616, 1524, 1440, 1356, 1280, 1208, 1140, 1076, 1016,  960,  907,
		  856,  808,  762,  720,  678,  640,  604,  570,  538,  508,  480,  453,
		  428,  404,  381,  360,  339,  320,  302,  285,  269,  254,  240,  226,
		  214,  202,  190,  180,  170,  160,  151,  143,  135,  127,  120,  113,
		  107,  101,   95,   90,   85,   80,   75,   71,   67,   63,   60,   56,
		   53,   50,   47,   45,   42,   40,   37,   35,   33,   31,   30,   28,
		   26,   25,   23,   22,   21,   20,   18,   17,   16,   15,   15,   14
	};
	// plus the note names
	private static final String [] noteStrings = { "C-", "C#", "D-", "D#", "E-", "F-", "F#", "G-", "G#", "A-", "A#", "H-" };

	/**
	 * From the Protracker V2.1A Playroutine - plus added overflow values
	 * Thanks to 8bitbubsy!
	 * Basic formula is 2^(index/12) so 856/(2^(1/12)) == 807.956 - the next note
	 * 856/(2^(12/12)) == 856/(2^1) == 856 / 2
	 * contains 16 finetuned period sections
	 */
	public static final int periodTable[] =
	{
		// finetune 0 (no finetuning)
		856,808,762,720,678,640,604,570,538,508,480,453,
		428,404,381,360,339,320,302,285,269,254,240,226,
		214,202,190,180,170,160,151,143,135,127,120,113,0,
		
		// finetune +1
		850,802,757,715,674,637,601,567,535,505,477,450,
		425,401,379,357,337,318,300,284,268,253,239,225,
		213,201,189,179,169,159,150,142,134,126,119,113,0,

		// finetune +2
		844,796,752,709,670,632,597,563,532,502,474,447,
		422,398,376,355,335,316,298,282,266,251,237,224,
		211,199,188,177,167,158,149,141,133,125,118,112,0,

		// finetune +3
		838,791,746,704,665,628,592,559,528,498,470,444,
		419,395,373,352,332,314,296,280,264,249,235,222,
		209,198,187,176,166,157,148,140,132,125,118,111,0,

		// finetune +4
		832,785,741,699,660,623,588,555,524,495,467,441,
		416,392,370,350,330,312,294,278,262,247,233,220,
		208,196,185,175,165,156,147,139,131,124,117,110,0,

		// finetune +5
		826,779,736,694,655,619,584,551,520,491,463,437,
		413,390,368,347,328,309,292,276,260,245,232,219,
		206,195,184,174,164,155,146,138,130,123,116,109,0,

		// finetune +6
		820,774,730,689,651,614,580,547,516,487,460,434,
		410,387,365,345,325,307,290,274,258,244,230,217,
		205,193,183,172,163,154,145,137,129,122,115,109,0,

		// finetune +7
		814,768,725,684,646,610,575,543,513,484,457,431,
		407,384,363,342,323,305,288,272,256,242,228,216,
		204,192,181,171,161,152,144,136,128,121,114,108,0,

		// finetune -8
		907,856,808,762,720,678,640,604,570,538,508,480,
		453,428,404,381,360,339,320,302,285,269,254,240,
		226,214,202,190,180,170,160,151,143,135,127,120,0,

		// finetune -7
		900,850,802,757,715,675,636,601,567,535,505,477,
		450,425,401,379,357,337,318,300,284,268,253,238,
		225,212,200,189,179,169,159,150,142,134,126,119,0,

		// finetune -6
		894,844,796,752,709,670,632,597,563,532,502,474,
		447,422,398,376,355,335,316,298,282,266,251,237,
		223,211,199,188,177,167,158,149,141,133,125,118,0,

		// finetune -5
		887,838,791,746,704,665,628,592,559,528,498,470,
		444,419,395,373,352,332,314,296,280,264,249,235,
		222,209,198,187,176,166,157,148,140,132,125,118,0,

		// finetune -4
		881,832,785,741,699,660,623,588,555,524,494,467,
		441,416,392,370,350,330,312,294,278,262,247,233,
		220,208,196,185,175,165,156,147,139,131,123,117,0,

		// finetune -3
		875,826,779,736,694,655,619,584,551,520,491,463,
		437,413,390,368,347,328,309,292,276,260,245,232,
		219,206,195,184,174,164,155,146,138,130,123,116,0,

		// finetune -2
		868,820,774,730,689,651,614,580,547,516,487,460,
		434,410,387,365,345,325,307,290,274,258,244,230,
		217,205,193,183,172,163,154,145,137,129,122,115,0,

		// finetune -1
		862,814,768,725,684,646,610,575,543,513,484,457,
		431,407,384,363,342,323,305,288,272,256,242,228,
		216,203,192,181,171,161,152,144,136,128,121,114,0,

		/* Arpeggio on -1 finetuned samples can do an out-of-bounds read from
		 * this table. Here's the correct overflow values from the
		 * "CursorPosTable" and "UnshiftedKeymap" table in the PT code, which are
		 * located right after the period table. These tables and their order didn't
		 * seem to change in the different PT1.x/PT2.x versions (I checked the
		 * source codes). (8bitbubsy)
		*/
		774,1800,2314,3087,4113,4627,5400,6426,6940,7713,
		8739,9253,24625,12851,13365
	};
	/**
	 * Table for Invert Loop and Funk Repeat effects (EFx, .MOD only) 
	 */
	public static final int modEFxTable[] =
	{
		0x00, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0D,
		0x10, 0x13, 0x16, 0x1A, 0x20, 0x2B, 0x40, 0x80
	};
	/**
	 * FT2 linear periods table
	 * bit-exact to FT2 table from 8bitbubsy's FT2 Clone
	 */
	public static int FT2_linearPeriods[] =
	{
		7744, 7740, 7736, 7732, 7728, 7724, 7720, 7716, 7712, 7708, 7704, 7700, 7696, 7692, 7688, 7684,
		7680, 7676, 7672, 7668, 7664, 7660, 7656, 7652, 7648, 7644, 7640, 7636, 7632, 7628, 7624, 7620,
		7616, 7612, 7608, 7604, 7600, 7596, 7592, 7588, 7584, 7580, 7576, 7572, 7568, 7564, 7560, 7556,
		7552, 7548, 7544, 7540, 7536, 7532, 7528, 7524, 7520, 7516, 7512, 7508, 7504, 7500, 7496, 7492,
		7488, 7484, 7480, 7476, 7472, 7468, 7464, 7460, 7456, 7452, 7448, 7444, 7440, 7436, 7432, 7428,
		7424, 7420, 7416, 7412, 7408, 7404, 7400, 7396, 7392, 7388, 7384, 7380, 7376, 7372, 7368, 7364,
		7360, 7356, 7352, 7348, 7344, 7340, 7336, 7332, 7328, 7324, 7320, 7316, 7312, 7308, 7304, 7300,
		7296, 7292, 7288, 7284, 7280, 7276, 7272, 7268, 7264, 7260, 7256, 7252, 7248, 7244, 7240, 7236,
		7232, 7228, 7224, 7220, 7216, 7212, 7208, 7204, 7200, 7196, 7192, 7188, 7184, 7180, 7176, 7172,
		7168, 7164, 7160, 7156, 7152, 7148, 7144, 7140, 7136, 7132, 7128, 7124, 7120, 7116, 7112, 7108,
		7104, 7100, 7096, 7092, 7088, 7084, 7080, 7076, 7072, 7068, 7064, 7060, 7056, 7052, 7048, 7044,
		7040, 7036, 7032, 7028, 7024, 7020, 7016, 7012, 7008, 7004, 7000, 6996, 6992, 6988, 6984, 6980,
		6976, 6972, 6968, 6964, 6960, 6956, 6952, 6948, 6944, 6940, 6936, 6932, 6928, 6924, 6920, 6916,
		6912, 6908, 6904, 6900, 6896, 6892, 6888, 6884, 6880, 6876, 6872, 6868, 6864, 6860, 6856, 6852,
		6848, 6844, 6840, 6836, 6832, 6828, 6824, 6820, 6816, 6812, 6808, 6804, 6800, 6796, 6792, 6788,
		6784, 6780, 6776, 6772, 6768, 6764, 6760, 6756, 6752, 6748, 6744, 6740, 6736, 6732, 6728, 6724,
		6720, 6716, 6712, 6708, 6704, 6700, 6696, 6692, 6688, 6684, 6680, 6676, 6672, 6668, 6664, 6660,
		6656, 6652, 6648, 6644, 6640, 6636, 6632, 6628, 6624, 6620, 6616, 6612, 6608, 6604, 6600, 6596,
		6592, 6588, 6584, 6580, 6576, 6572, 6568, 6564, 6560, 6556, 6552, 6548, 6544, 6540, 6536, 6532,
		6528, 6524, 6520, 6516, 6512, 6508, 6504, 6500, 6496, 6492, 6488, 6484, 6480, 6476, 6472, 6468,
		6464, 6460, 6456, 6452, 6448, 6444, 6440, 6436, 6432, 6428, 6424, 6420, 6416, 6412, 6408, 6404,
		6400, 6396, 6392, 6388, 6384, 6380, 6376, 6372, 6368, 6364, 6360, 6356, 6352, 6348, 6344, 6340,
		6336, 6332, 6328, 6324, 6320, 6316, 6312, 6308, 6304, 6300, 6296, 6292, 6288, 6284, 6280, 6276,
		6272, 6268, 6264, 6260, 6256, 6252, 6248, 6244, 6240, 6236, 6232, 6228, 6224, 6220, 6216, 6212,
		6208, 6204, 6200, 6196, 6192, 6188, 6184, 6180, 6176, 6172, 6168, 6164, 6160, 6156, 6152, 6148,
		6144, 6140, 6136, 6132, 6128, 6124, 6120, 6116, 6112, 6108, 6104, 6100, 6096, 6092, 6088, 6084,
		6080, 6076, 6072, 6068, 6064, 6060, 6056, 6052, 6048, 6044, 6040, 6036, 6032, 6028, 6024, 6020,
		6016, 6012, 6008, 6004, 6000, 5996, 5992, 5988, 5984, 5980, 5976, 5972, 5968, 5964, 5960, 5956,
		5952, 5948, 5944, 5940, 5936, 5932, 5928, 5924, 5920, 5916, 5912, 5908, 5904, 5900, 5896, 5892,
		5888, 5884, 5880, 5876, 5872, 5868, 5864, 5860, 5856, 5852, 5848, 5844, 5840, 5836, 5832, 5828,
		5824, 5820, 5816, 5812, 5808, 5804, 5800, 5796, 5792, 5788, 5784, 5780, 5776, 5772, 5768, 5764,
		5760, 5756, 5752, 5748, 5744, 5740, 5736, 5732, 5728, 5724, 5720, 5716, 5712, 5708, 5704, 5700,
		5696, 5692, 5688, 5684, 5680, 5676, 5672, 5668, 5664, 5660, 5656, 5652, 5648, 5644, 5640, 5636,
		5632, 5628, 5624, 5620, 5616, 5612, 5608, 5604, 5600, 5596, 5592, 5588, 5584, 5580, 5576, 5572,
		5568, 5564, 5560, 5556, 5552, 5548, 5544, 5540, 5536, 5532, 5528, 5524, 5520, 5516, 5512, 5508,
		5504, 5500, 5496, 5492, 5488, 5484, 5480, 5476, 5472, 5468, 5464, 5460, 5456, 5452, 5448, 5444,
		5440, 5436, 5432, 5428, 5424, 5420, 5416, 5412, 5408, 5404, 5400, 5396, 5392, 5388, 5384, 5380,
		5376, 5372, 5368, 5364, 5360, 5356, 5352, 5348, 5344, 5340, 5336, 5332, 5328, 5324, 5320, 5316,
		5312, 5308, 5304, 5300, 5296, 5292, 5288, 5284, 5280, 5276, 5272, 5268, 5264, 5260, 5256, 5252,
		5248, 5244, 5240, 5236, 5232, 5228, 5224, 5220, 5216, 5212, 5208, 5204, 5200, 5196, 5192, 5188,
		5184, 5180, 5176, 5172, 5168, 5164, 5160, 5156, 5152, 5148, 5144, 5140, 5136, 5132, 5128, 5124,
		5120, 5116, 5112, 5108, 5104, 5100, 5096, 5092, 5088, 5084, 5080, 5076, 5072, 5068, 5064, 5060,
		5056, 5052, 5048, 5044, 5040, 5036, 5032, 5028, 5024, 5020, 5016, 5012, 5008, 5004, 5000, 4996,
		4992, 4988, 4984, 4980, 4976, 4972, 4968, 4964, 4960, 4956, 4952, 4948, 4944, 4940, 4936, 4932,
		4928, 4924, 4920, 4916, 4912, 4908, 4904, 4900, 4896, 4892, 4888, 4884, 4880, 4876, 4872, 4868,
		4864, 4860, 4856, 4852, 4848, 4844, 4840, 4836, 4832, 4828, 4824, 4820, 4816, 4812, 4808, 4804,
		4800, 4796, 4792, 4788, 4784, 4780, 4776, 4772, 4768, 4764, 4760, 4756, 4752, 4748, 4744, 4740,
		4736, 4732, 4728, 4724, 4720, 4716, 4712, 4708, 4704, 4700, 4696, 4692, 4688, 4684, 4680, 4676,
		4672, 4668, 4664, 4660, 4656, 4652, 4648, 4644, 4640, 4636, 4632, 4628, 4624, 4620, 4616, 4612,
		4608, 4604, 4600, 4596, 4592, 4588, 4584, 4580, 4576, 4572, 4568, 4564, 4560, 4556, 4552, 4548,
		4544, 4540, 4536, 4532, 4528, 4524, 4520, 4516, 4512, 4508, 4504, 4500, 4496, 4492, 4488, 4484,
		4480, 4476, 4472, 4468, 4464, 4460, 4456, 4452, 4448, 4444, 4440, 4436, 4432, 4428, 4424, 4420,
		4416, 4412, 4408, 4404, 4400, 4396, 4392, 4388, 4384, 4380, 4376, 4372, 4368, 4364, 4360, 4356,
		4352, 4348, 4344, 4340, 4336, 4332, 4328, 4324, 4320, 4316, 4312, 4308, 4304, 4300, 4296, 4292,
		4288, 4284, 4280, 4276, 4272, 4268, 4264, 4260, 4256, 4252, 4248, 4244, 4240, 4236, 4232, 4228,
		4224, 4220, 4216, 4212, 4208, 4204, 4200, 4196, 4192, 4188, 4184, 4180, 4176, 4172, 4168, 4164,
		4160, 4156, 4152, 4148, 4144, 4140, 4136, 4132, 4128, 4124, 4120, 4116, 4112, 4108, 4104, 4100,
		4096, 4092, 4088, 4084, 4080, 4076, 4072, 4068, 4064, 4060, 4056, 4052, 4048, 4044, 4040, 4036,
		4032, 4028, 4024, 4020, 4016, 4012, 4008, 4004, 4000, 3996, 3992, 3988, 3984, 3980, 3976, 3972,
		3968, 3964, 3960, 3956, 3952, 3948, 3944, 3940, 3936, 3932, 3928, 3924, 3920, 3916, 3912, 3908,
		3904, 3900, 3896, 3892, 3888, 3884, 3880, 3876, 3872, 3868, 3864, 3860, 3856, 3852, 3848, 3844,
		3840, 3836, 3832, 3828, 3824, 3820, 3816, 3812, 3808, 3804, 3800, 3796, 3792, 3788, 3784, 3780,
		3776, 3772, 3768, 3764, 3760, 3756, 3752, 3748, 3744, 3740, 3736, 3732, 3728, 3724, 3720, 3716,
		3712, 3708, 3704, 3700, 3696, 3692, 3688, 3684, 3680, 3676, 3672, 3668, 3664, 3660, 3656, 3652,
		3648, 3644, 3640, 3636, 3632, 3628, 3624, 3620, 3616, 3612, 3608, 3604, 3600, 3596, 3592, 3588,
		3584, 3580, 3576, 3572, 3568, 3564, 3560, 3556, 3552, 3548, 3544, 3540, 3536, 3532, 3528, 3524,
		3520, 3516, 3512, 3508, 3504, 3500, 3496, 3492, 3488, 3484, 3480, 3476, 3472, 3468, 3464, 3460,
		3456, 3452, 3448, 3444, 3440, 3436, 3432, 3428, 3424, 3420, 3416, 3412, 3408, 3404, 3400, 3396,
		3392, 3388, 3384, 3380, 3376, 3372, 3368, 3364, 3360, 3356, 3352, 3348, 3344, 3340, 3336, 3332,
		3328, 3324, 3320, 3316, 3312, 3308, 3304, 3300, 3296, 3292, 3288, 3284, 3280, 3276, 3272, 3268,
		3264, 3260, 3256, 3252, 3248, 3244, 3240, 3236, 3232, 3228, 3224, 3220, 3216, 3212, 3208, 3204,
		3200, 3196, 3192, 3188, 3184, 3180, 3176, 3172, 3168, 3164, 3160, 3156, 3152, 3148, 3144, 3140,
		3136, 3132, 3128, 3124, 3120, 3116, 3112, 3108, 3104, 3100, 3096, 3092, 3088, 3084, 3080, 3076,
		3072, 3068, 3064, 3060, 3056, 3052, 3048, 3044, 3040, 3036, 3032, 3028, 3024, 3020, 3016, 3012,
		3008, 3004, 3000, 2996, 2992, 2988, 2984, 2980, 2976, 2972, 2968, 2964, 2960, 2956, 2952, 2948,
		2944, 2940, 2936, 2932, 2928, 2924, 2920, 2916, 2912, 2908, 2904, 2900, 2896, 2892, 2888, 2884,
		2880, 2876, 2872, 2868, 2864, 2860, 2856, 2852, 2848, 2844, 2840, 2836, 2832, 2828, 2824, 2820,
		2816, 2812, 2808, 2804, 2800, 2796, 2792, 2788, 2784, 2780, 2776, 2772, 2768, 2764, 2760, 2756,
		2752, 2748, 2744, 2740, 2736, 2732, 2728, 2724, 2720, 2716, 2712, 2708, 2704, 2700, 2696, 2692,
		2688, 2684, 2680, 2676, 2672, 2668, 2664, 2660, 2656, 2652, 2648, 2644, 2640, 2636, 2632, 2628,
		2624, 2620, 2616, 2612, 2608, 2604, 2600, 2596, 2592, 2588, 2584, 2580, 2576, 2572, 2568, 2564,
		2560, 2556, 2552, 2548, 2544, 2540, 2536, 2532, 2528, 2524, 2520, 2516, 2512, 2508, 2504, 2500,
		2496, 2492, 2488, 2484, 2480, 2476, 2472, 2468, 2464, 2460, 2456, 2452, 2448, 2444, 2440, 2436,
		2432, 2428, 2424, 2420, 2416, 2412, 2408, 2404, 2400, 2396, 2392, 2388, 2384, 2380, 2376, 2372,
		2368, 2364, 2360, 2356, 2352, 2348, 2344, 2340, 2336, 2332, 2328, 2324, 2320, 2316, 2312, 2308,
		2304, 2300, 2296, 2292, 2288, 2284, 2280, 2276, 2272, 2268, 2264, 2260, 2256, 2252, 2248, 2244,
		2240, 2236, 2232, 2228, 2224, 2220, 2216, 2212, 2208, 2204, 2200, 2196, 2192, 2188, 2184, 2180,
		2176, 2172, 2168, 2164, 2160, 2156, 2152, 2148, 2144, 2140, 2136, 2132, 2128, 2124, 2120, 2116,
		2112, 2108, 2104, 2100, 2096, 2092, 2088, 2084, 2080, 2076, 2072, 2068, 2064, 2060, 2056, 2052,
		2048, 2044, 2040, 2036, 2032, 2028, 2024, 2020, 2016, 2012, 2008, 2004, 2000, 1996, 1992, 1988,
		1984, 1980, 1976, 1972, 1968, 1964, 1960, 1956, 1952, 1948, 1944, 1940, 1936, 1932, 1928, 1924,
		1920, 1916, 1912, 1908, 1904, 1900, 1896, 1892, 1888, 1884, 1880, 1876, 1872, 1868, 1864, 1860,
		1856, 1852, 1848, 1844, 1840, 1836, 1832, 1828, 1824, 1820, 1816, 1812, 1808, 1804, 1800, 1796,
		1792, 1788, 1784, 1780, 1776, 1772, 1768, 1764, 1760, 1756, 1752, 1748, 1744, 1740, 1736, 1732,
		1728, 1724, 1720, 1716, 1712, 1708, 1704, 1700, 1696, 1692, 1688, 1684, 1680, 1676, 1672, 1668,
		1664, 1660, 1656, 1652, 1648, 1644, 1640, 1636, 1632, 1628, 1624, 1620, 1616, 1612, 1608, 1604,
		1600, 1596, 1592, 1588, 1584, 1580, 1576, 1572, 1568, 1564, 1560, 1556, 1552, 1548, 1544, 1540,
		1536, 1532, 1528, 1524, 1520, 1516, 1512, 1508, 1504, 1500, 1496, 1492, 1488, 1484, 1480, 1476,
		1472, 1468, 1464, 1460, 1456, 1452, 1448, 1444, 1440, 1436, 1432, 1428, 1424, 1420, 1416, 1412,
		1408, 1404, 1400, 1396, 1392, 1388, 1384, 1380, 1376, 1372, 1368, 1364, 1360, 1356, 1352, 1348,
		1344, 1340, 1336, 1332, 1328, 1324, 1320, 1316, 1312, 1308, 1304, 1300, 1296, 1292, 1288, 1284,
		1280, 1276, 1272, 1268, 1264, 1260, 1256, 1252, 1248, 1244, 1240, 1236, 1232, 1228, 1224, 1220,
		1216, 1212, 1208, 1204, 1200, 1196, 1192, 1188, 1184, 1180, 1176, 1172, 1168, 1164, 1160, 1156,
		1152, 1148, 1144, 1140, 1136, 1132, 1128, 1124, 1120, 1116, 1112, 1108, 1104, 1100, 1096, 1092,
		1088, 1084, 1080, 1076, 1072, 1068, 1064, 1060, 1056, 1052, 1048, 1044, 1040, 1036, 1032, 1028,
		1024, 1020, 1016, 1012, 1008, 1004, 1000,  996,  992,  988,  984,  980,  976,  972,  968,  964,
		 960,  956,  952,  948,  944,  940,  936,  932,  928,  924,  920,  916,  912,  908,  904,  900,
		 896,  892,  888,  884,  880,  876,  872,  868,  864,  860,  856,  852,  848,  844,  840,  836,
		 832,  828,  824,  820,  816,  812,  808,  804,  800,  796,  792,  788,  784,  780,  776,  772,
		 768,  764,  760,  756,  752,  748,  744,  740,  736,  732,  728,  724,  720,  716,  712,  708,
		 704,  700,  696,  692,  688,  684,  680,  676,  672,  668,  664,  660,  656,  652,  648,  644,
		 640,  636,  632,  628,  624,  620,  616,  612,  608,  604,  600,  596,  592,  588,  584,  580,
		 576,  572,  568,  564,  560,  556,  552,  548,  544,  540,  536,  532,  528,  524,  520,  516,
		 512,  508,  504,  500,  496,  492,  488,  484,  480,  476,  472,  468,  464,  460,  456,  452,
		 448,  444,  440,  436,  432,  428,  424,  420,  416,  412,  408,  404,  400,  396,  392,  388,
		 384,  380,  376,  372,  368,  364,  360,  356,  352,  348,  344,  340,  336,  332,  328,  324,
		 320,  316,  312,  308,  304,  300,  296,  292,  288,  284,  280,  276,  272,  268,  264,  260,
		 256,  252,  248,  244,  240,  236,  232,  228,  224,  220,  216,  212,  208,  204,  200,  196,
		 192,  188,  184,  180,  176,  172,  168,  164,  160,  156,  152,  148,  144,  140,  136,  132,
		 128,  124,  120,  116,  112,  108,  104,  100,   96,   92,   88,   84,   80,   76,   72,   68,
		  64,   60,   56,   52,   48,   44,   40,   36,   32,   28,   24,   20,   16,   12,    8,    4
	};
	/**
	 * FT2 amiga periods table
	 * bit-exact to FT2 table from 8bitbubsy's FT2 Clone
	 */
	public static int FT2_amigaPeriods[] =
	{
		29024, 28912, 28800, 28704, 28608, 28496, 28384, 28288, 28192, 28096, 28000, 27888, 27776, 27680, 27584, 27488,
		27392, 27296, 27200, 27104, 27008, 26912, 26816, 26720, 26624, 26528, 26432, 26336, 26240, 26144, 26048, 25952,
		25856, 25760, 25664, 25568, 25472, 25392, 25312, 25216, 25120, 25024, 24928, 24848, 24768, 24672, 24576, 24480,
		24384, 24304, 24224, 24144, 24064, 23968, 23872, 23792, 23712, 23632, 23552, 23456, 23360, 23280, 23200, 23120,
		23040, 22960, 22880, 22784, 22688, 22608, 22528, 22448, 22368, 22288, 22208, 22128, 22048, 21968, 21888, 21792,
		21696, 21648, 21600, 21520, 21440, 21360, 21280, 21200, 21120, 21040, 20960, 20896, 20832, 20752, 20672, 20576,
		20480, 20416, 20352, 20288, 20224, 20160, 20096, 20016, 19936, 19872, 19808, 19728, 19648, 19584, 19520, 19424,
		19328, 19280, 19232, 19168, 19104, 19024, 18944, 18880, 18816, 18752, 18688, 18624, 18560, 18480, 18400, 18320,
		18240, 18192, 18144, 18080, 18016, 17952, 17888, 17824, 17760, 17696, 17632, 17568, 17504, 17440, 17376, 17296,
		17216, 17168, 17120, 17072, 17024, 16960, 16896, 16832, 16768, 16704, 16640, 16576, 16512, 16464, 16416, 16336,
		16256, 16208, 16160, 16112, 16064, 16000, 15936, 15872, 15808, 15760, 15712, 15648, 15584, 15536, 15488, 15424,
		15360, 15312, 15264, 15216, 15168, 15104, 15040, 14992, 14944, 14880, 14816, 14768, 14720, 14672, 14624, 14568,
		14512, 14456, 14400, 14352, 14304, 14248, 14192, 14144, 14096, 14048, 14000, 13944, 13888, 13840, 13792, 13744,
		13696, 13648, 13600, 13552, 13504, 13456, 13408, 13360, 13312, 13264, 13216, 13168, 13120, 13072, 13024, 12976,
		12928, 12880, 12832, 12784, 12736, 12696, 12656, 12608, 12560, 12512, 12464, 12424, 12384, 12336, 12288, 12240,
		12192, 12152, 12112, 12072, 12032, 11984, 11936, 11896, 11856, 11816, 11776, 11728, 11680, 11640, 11600, 11560,
		11520, 11480, 11440, 11392, 11344, 11304, 11264, 11224, 11184, 11144, 11104, 11064, 11024, 10984, 10944, 10896,
		10848, 10824, 10800, 10760, 10720, 10680, 10640, 10600, 10560, 10520, 10480, 10448, 10416, 10376, 10336, 10288,
		10240, 10208, 10176, 10144, 10112, 10080, 10048, 10008,  9968,  9936,  9904,  9864,  9824,  9792,  9760,  9712,
		 9664,  9640,  9616,  9584,  9552,  9512,  9472,  9440,  9408,  9376,  9344,  9312,  9280,  9240,  9200,  9160,
		 9120,  9096,  9072,  9040,  9008,  8976,  8944,  8912,  8880,  8848,  8816,  8784,  8752,  8720,  8688,  8648,
		 8608,  8584,  8560,  8536,  8512,  8480,  8448,  8416,  8384,  8352,  8320,  8288,  8256,  8232,  8208,  8168,
		 8128,  8104,  8080,  8056,  8032,  8000,  7968,  7936,  7904,  7880,  7856,  7824,  7792,  7768,  7744,  7712,
		 7680,  7656,  7632,  7608,  7584,  7552,  7520,  7496,  7472,  7440,  7408,  7384,  7360,  7336,  7312,  7284,
		 7256,  7228,  7200,  7176,  7152,  7124,  7096,  7072,  7048,  7024,  7000,  6972,  6944,  6920,  6896,  6872,
		 6848,  6824,  6800,  6776,  6752,  6728,  6704,  6680,  6656,  6632,  6608,  6584,  6560,  6536,  6512,  6488,
		 6464,  6440,  6416,  6392,  6368,  6348,  6328,  6304,  6280,  6256,  6232,  6212,  6192,  6168,  6144,  6120,
		 6096,  6076,  6056,  6036,  6016,  5992,  5968,  5948,  5928,  5908,  5888,  5864,  5840,  5820,  5800,  5780,
		 5760,  5740,  5720,  5696,  5672,  5652,  5632,  5612,  5592,  5572,  5552,  5532,  5512,  5492,  5472,  5448,
		 5424,  5412,  5400,  5380,  5360,  5340,  5320,  5300,  5280,  5260,  5240,  5224,  5208,  5188,  5168,  5144,
		 5120,  5104,  5088,  5072,  5056,  5040,  5024,  5004,  4984,  4968,  4952,  4932,  4912,  4896,  4880,  4856,
		 4832,  4820,  4808,  4792,  4776,  4756,  4736,  4720,  4704,  4688,  4672,  4656,  4640,  4620,  4600,  4580,
		 4560,  4548,  4536,  4520,  4504,  4488,  4472,  4456,  4440,  4424,  4408,  4392,  4376,  4360,  4344,  4324,
		 4304,  4292,  4280,  4268,  4256,  4240,  4224,  4208,  4192,  4176,  4160,  4144,  4128,  4116,  4104,  4084,
		 4064,  4052,  4040,  4028,  4016,  4000,  3984,  3968,  3952,  3940,  3928,  3912,  3896,  3884,  3872,  3856,
		 3840,  3828,  3816,  3804,  3792,  3776,  3760,  3748,  3736,  3720,  3704,  3692,  3680,  3668,  3656,  3642,
		 3628,  3614,  3600,  3588,  3576,  3562,  3548,  3536,  3524,  3512,  3500,  3486,  3472,  3460,  3448,  3436,
		 3424,  3412,  3400,  3388,  3376,  3364,  3352,  3340,  3328,  3316,  3304,  3292,  3280,  3268,  3256,  3244,
		 3232,  3220,  3208,  3196,  3184,  3174,  3164,  3152,  3140,  3128,  3116,  3106,  3096,  3084,  3072,  3060,
		 3048,  3038,  3028,  3018,  3008,  2996,  2984,  2974,  2964,  2954,  2944,  2932,  2920,  2910,  2900,  2890,
		 2880,  2870,  2860,  2848,  2836,  2826,  2816,  2806,  2796,  2786,  2776,  2766,  2756,  2746,  2736,  2724,
		 2712,  2706,  2700,  2690,  2680,  2670,  2660,  2650,  2640,  2630,  2620,  2612,  2604,  2594,  2584,  2572,
		 2560,  2552,  2544,  2536,  2528,  2520,  2512,  2502,  2492,  2484,  2476,  2466,  2456,  2448,  2440,  2428,
		 2416,  2410,  2404,  2396,  2388,  2378,  2368,  2360,  2352,  2344,  2336,  2328,  2320,  2310,  2300,  2290,
		 2280,  2274,  2268,  2260,  2252,  2244,  2236,  2228,  2220,  2212,  2204,  2196,  2188,  2180,  2172,  2162,
		 2152,  2146,  2140,  2134,  2128,  2120,  2112,  2104,  2096,  2088,  2080,  2072,  2064,  2058,  2052,  2042,
		 2032,  2026,  2020,  2014,  2008,  2000,  1992,  1984,  1976,  1970,  1964,  1956,  1948,  1942,  1936,  1928,
		 1920,  1914,  1908,  1902,  1896,  1888,  1880,  1874,  1868,  1860,  1852,  1846,  1840,  1834,  1828,  1821,
		 1814,  1807,  1800,  1794,  1788,  1781,  1774,  1768,  1762,  1756,  1750,  1743,  1736,  1730,  1724,  1718,
		 1712,  1706,  1700,  1694,  1688,  1682,  1676,  1670,  1664,  1658,  1652,  1646,  1640,  1634,  1628,  1622,
		 1616,  1610,  1604,  1598,  1592,  1587,  1582,  1576,  1570,  1564,  1558,  1553,  1548,  1542,  1536,  1530,
		 1524,  1519,  1514,  1509,  1504,  1498,  1492,  1487,  1482,  1477,  1472,  1466,  1460,  1455,  1450,  1445,
		 1440,  1435,  1430,  1424,  1418,  1413,  1408,  1403,  1398,  1393,  1388,  1383,  1378,  1373,  1368,  1362,
		 1356,  1353,  1350,  1345,  1340,  1335,  1330,  1325,  1320,  1315,  1310,  1306,  1302,  1297,  1292,  1286,
		 1280,  1276,  1272,  1268,  1264,  1260,  1256,  1251,  1246,  1242,  1238,  1233,  1228,  1224,  1220,  1214,
		 1208,  1205,  1202,  1198,  1194,  1189,  1184,  1180,  1176,  1172,  1168,  1164,  1160,  1155,  1150,  1145,
		 1140,  1137,  1134,  1130,  1126,  1122,  1118,  1114,  1110,  1106,  1102,  1098,  1094,  1090,  1086,  1081,
		 1076,  1073,  1070,  1067,  1064,  1060,  1056,  1052,  1048,  1044,  1040,  1036,  1032,  1029,  1026,  1021,
		 1016,  1013,  1010,  1007,  1004,  1000,   996,   992,   988,   985,   982,   978,   974,   971,   968,   964,
		  960,   957,   954,   951,   948,   944,   940,   937,   934,   930,   926,   923,   920,   917,   914,   910,
		  907,   903,   900,   897,   894,   890,   887,   884,   881,   878,   875,   871,   868,   865,   862,   859,
		  856,   853,   850,   847,   844,   841,   838,   835,   832,   829,   826,   823,   820,   817,   814,   811,
		  808,   805,   802,   799,   796,   793,   791,   788,   785,   782,   779,   776,   774,   771,   768,   765,
		  762,   759,   757,   754,   752,   749,   746,   743,   741,   738,   736,   733,   730,   727,   725,   722,
		  720,   717,   715,   712,   709,   706,   704,   701,   699,   696,   694,   691,   689,   686,   684,   681,
		  678,   676,   675,   672,   670,   667,   665,   662,   660,   657,   655,   653,   651,   648,   646,   643,
		  640,   638,   636,   634,   632,   630,   628,   625,   623,   621,   619,   616,   614,   612,   610,   607,
		  604,   602,   601,   599,   597,   594,   592,   590,   588,   586,   584,   582,   580,   577,   575,   572,
		  570,   568,   567,   565,   563,   561,   559,   557,   555,   553,   551,   549,   547,   545,   543,   540,
		  538,   536,   535,   533,   532,   530,   528,   526,   524,   522,   520,   518,   516,   514,   513,   510,
		  508,   506,   505,   503,   502,   500,   498,   496,   494,   492,   491,   489,   487,   485,   484,   482,
		  480,   478,   477,   475,   474,   472,   470,   468,   467,   465,   463,   461,   460,   458,   457,   455,
		  453,   451,   450,   448,   447,   445,   443,   441,   440,   438,   437,   435,   434,   432,   431,   429,
		  428,   426,   425,   423,   422,   420,   419,   417,   416,   414,   413,   411,   410,   408,   407,   405,
		  404,   402,   401,   399,   398,   396,   395,   393,   392,   390,   389,   388,   387,   385,   384,   382,
		  381,   379,   378,   377,   376,   374,   373,   371,   370,   369,   368,   366,   365,   363,   362,   361,
		  360,   358,   357,   355,   354,   353,   352,   350,   349,   348,   347,   345,   344,   343,   342,   340,
		  339,   338,   337,   336,   335,   333,   332,   331,   330,   328,   327,   326,   325,   324,   323,   321,
		  320,   319,   318,   317,   316,   315,   314,   312,   311,   310,   309,   308,   307,   306,   305,   303,
		  302,   301,   300,   299,   298,   297,   296,   295,   294,   293,   292,   291,   290,   288,   287,   286,
		  285,   284,   283,   282,   281,   280,   279,   278,   277,   276,   275,   274,   273,   272,   271,   270,
		  269,   268,   267,   266,   266,   265,   264,   263,   262,   261,   260,   259,   258,   257,   256,   255,
		  254,   253,   252,   251,   251,   250,   249,   248,   247,   246,   245,   244,   243,   242,   242,   241,
		  240,   239,   238,   237,   237,   236,   235,   234,   233,   232,   231,   230,   230,   229,   228,   227,
		  227,   226,   225,   224,   223,   222,   222,   221,   220,   219,   219,   218,   217,   216,   215,   214,
		  214,   213,   212,   211,   211,   210,   209,   208,   208,   207,   206,   205,   205,   204,   203,   202,
		  202,   201,   200,   199,   199,   198,   198,   197,   196,   195,   195,   194,   193,   192,   192,   191,
		  190,   189,   189,   188,   188,   187,   186,   185,   185,   184,   184,   183,   182,   181,   181,   180,
		  180,   179,   179,   178,   177,   176,   176,   175,   175,   174,   173,   172,   172,   171,   171,   170,
		  169,   169,   169,   168,   167,   166,   166,   165,   165,   164,   164,   163,   163,   162,   161,   160,
		  160,   159,   159,   158,   158,   157,   157,   156,   156,   155,   155,   154,   153,   152,   152,   151,
		  151,   150,   150,   149,   149,   148,   148,   147,   147,   146,   146,   145,   145,   144,   144,   143,
		  142,   142,   142,   141,   141,   140,   140,   139,   139,   138,   138,   137,   137,   136,   136,   135,
		  134,   134,   134,   133,   133,   132,   132,   131,   131,   130,   130,   129,   129,   128,   128,   127,
		  127,   126,   126,   125,   125,   124,   124,   123,   123,   123,   123,   122,   122,   121,   121,   120,
		  120,   119,   119,   118,   118,   117,   117,   117,   117,   116,   116,   115,   115,   114,   114,   113,
		  113,   112,   112,   112,   112,   111,   111,   110,   110,   109,   109,   108,   108,   108,   108,   107,
		  107,   106,   106,   105,   105,   105,   105,   104,   104,   103,   103,   102,   102,   102,   102,   101,
		  101,   100,   100,    99,    99,    99,    99,    98,    98,    97,    97,    97,    97,    96,    96,    95,
		   95,    95,    95,    94,    94,    93,    93,    93,    93,    92,    92,    91,    91,    91,    91,    90,
		   90,    89,    89,    89,    89,    88,    88,    87,    87,    87,    87,    86,    86,    85,    85,    85,
		   85,    84,    84,    84,    84,    83,    83,    82,    82,    82,    82,    81,    81,    81,    81,    80,
		   80,    79,    79,    79,    79,    78,    78,    78,    78,    77,    77,    77,    77,    76,    76,    75,
		   75,    75,    75,    75,    75,    74,    74,    73,    73,    73,    73,    72,    72,    72,    72,    71,
		   71,    71,    71,    70,    70,    70,    70,    69,    69,    69,    69,    68,    68,    68,    68,    67,
		   67,    67,    67,    66,    66,    66,    66,    65,    65,    65,    65,    64,    64,    64,    64,    63,
		   63,    63,    63,    63,    63,    62,    62,    62,    62,    61,    61,    61,    61,    60,    60,    60,
		   60,    60,    60,    59,    59,    59,    59,    58,    58,    58,    58,    57,    57,    57,    57,    57,
		   57,    56,    56,    56,    56,    55,    55,    55,    55,    55,    55,    54,    54,    54,    54,    53,
		   53,    53,    53,    53,    53,    52,    52,    52,    52,    52,    52,    51,    51,    51,    51,    50,
		   50,    50,    50,    50,    50,    49,    49,    49,    49,    49,    49,    48,    48,    48,    48,    48,
		   48,    47,    47,    47,    47,    47,    47,    46,    46,    46,    46,    46,    46,    45,    45,    45,
		   45,    45,    45,    44,    44,    44,    44,    44,    44,    43,    43,    43,    43,    43,    43,    42,
		   42,    42,    42,    42,    42,    42,    42,    41,    41,    41,    41,    41,    41,    40,    40,    40,
		   40,    40,    40,    39,    39,    39,    39,    39,    39,    39,    39,    38,    38,    38,    38,    38,
		   38,    38,    38,    37,    37,    37,    37,    37,    37,    36,    36,    36,    36,    36,    36,    36,
		   36,    35,    35,    35,    35,    35,    35,    35,    35,    34,    34,    34,    34,    34,    34,    34,
		   34,    33,    33,    33,    33,    33,    33,    33,    33,    32,    32,    32,    32,    32,    32,    32,
		   32,    32,    32,    31,    31,    31,    31,    31,    31,    31,    31,    30,    30,    30,    30,    30,
		   30,    30,    30,    30,    30,    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,

		   // these last values are wrong (but identical to FT2) because of a bug in how FT2 calculates this table
		   22, 16, 8, 0, 16, 32, 24, 16, 8, 0, 16, 32, 24, 16, 8, 0, 0
	};
	/**
	 * Triton's linear periods to frequency translation table (for XM modules)
	 */
	public static final int [] lintab =
	{
		535232, 534749, 534266, 533784, 533303, 532822, 532341, 531861, 531381, 530902, 530423, 529944, 529466, 528988, 528511, 528034,
		527558, 527082, 526607, 526131, 525657, 525183, 524709, 524236, 523763, 523290, 522818, 522346, 521875, 521404, 520934, 520464,
		519994, 519525, 519057, 518588, 518121, 517653, 517186, 516720, 516253, 515788, 515322, 514858, 514393, 513929, 513465, 513002,
		512539, 512077, 511615, 511154, 510692, 510232, 509771, 509312, 508852, 508393, 507934, 507476, 507018, 506561, 506104, 505647,
		505191, 504735, 504280, 503825, 503371, 502917, 502463, 502010, 501557, 501104, 500652, 500201, 499749, 499298, 498848, 498398,
		497948, 497499, 497050, 496602, 496154, 495706, 495259, 494812, 494366, 493920, 493474, 493029, 492585, 492140, 491696, 491253,
		490809, 490367, 489924, 489482, 489041, 488600, 488159, 487718, 487278, 486839, 486400, 485961, 485522, 485084, 484647, 484210,
		483773, 483336, 482900, 482465, 482029, 481595, 481160, 480726, 480292, 479859, 479426, 478994, 478562, 478130, 477699, 477268,
		476837, 476407, 475977, 475548, 475119, 474690, 474262, 473834, 473407, 472979, 472553, 472126, 471701, 471275, 470850, 470425,
		470001, 469577, 469153, 468730, 468307, 467884, 467462, 467041, 466619, 466198, 465778, 465358, 464938, 464518, 464099, 463681,
		463262, 462844, 462427, 462010, 461593, 461177, 460760, 460345, 459930, 459515, 459100, 458686, 458272, 457859, 457446, 457033,
		456621, 456209, 455797, 455386, 454975, 454565, 454155, 453745, 453336, 452927, 452518, 452110, 451702, 451294, 450887, 450481,
		450074, 449668, 449262, 448857, 448452, 448048, 447644, 447240, 446836, 446433, 446030, 445628, 445226, 444824, 444423, 444022,
		443622, 443221, 442821, 442422, 442023, 441624, 441226, 440828, 440430, 440033, 439636, 439239, 438843, 438447, 438051, 437656,
		437261, 436867, 436473, 436079, 435686, 435293, 434900, 434508, 434116, 433724, 433333, 432942, 432551, 432161, 431771, 431382,
		430992, 430604, 430215, 429827, 429439, 429052, 428665, 428278, 427892, 427506, 427120, 426735, 426350, 425965, 425581, 425197,
		424813, 424430, 424047, 423665, 423283, 422901, 422519, 422138, 421757, 421377, 420997, 420617, 420237, 419858, 419479, 419101,
		418723, 418345, 417968, 417591, 417214, 416838, 416462, 416086, 415711, 415336, 414961, 414586, 414212, 413839, 413465, 413092,
		412720, 412347, 411975, 411604, 411232, 410862, 410491, 410121, 409751, 409381, 409012, 408643, 408274, 407906, 407538, 407170,
		406803, 406436, 406069, 405703, 405337, 404971, 404606, 404241, 403876, 403512, 403148, 402784, 402421, 402058, 401695, 401333,
		400970, 400609, 400247, 399886, 399525, 399165, 398805, 398445, 398086, 397727, 397368, 397009, 396651, 396293, 395936, 395579,
		395222, 394865, 394509, 394153, 393798, 393442, 393087, 392733, 392378, 392024, 391671, 391317, 390964, 390612, 390259, 389907,
		389556, 389204, 388853, 388502, 388152, 387802, 387452, 387102, 386753, 386404, 386056, 385707, 385359, 385012, 384664, 384317,
		383971, 383624, 383278, 382932, 382587, 382242, 381897, 381552, 381208, 380864, 380521, 380177, 379834, 379492, 379149, 378807,
		378466, 378124, 377783, 377442, 377102, 376762, 376422, 376082, 375743, 375404, 375065, 374727, 374389, 374051, 373714, 373377,
		373040, 372703, 372367, 372031, 371695, 371360, 371025, 370690, 370356, 370022, 369688, 369355, 369021, 368688, 368356, 368023,
		367691, 367360, 367028, 366697, 366366, 366036, 365706, 365376, 365046, 364717, 364388, 364059, 363731, 363403, 363075, 362747,
		362420, 362093, 361766, 361440, 361114, 360788, 360463, 360137, 359813, 359488, 359164, 358840, 358516, 358193, 357869, 357547,
		357224, 356902, 356580, 356258, 355937, 355616, 355295, 354974, 354654, 354334, 354014, 353695, 353376, 353057, 352739, 352420,
		352103, 351785, 351468, 351150, 350834, 350517, 350201, 349885, 349569, 349254, 348939, 348624, 348310, 347995, 347682, 347368,
		347055, 346741, 346429, 346116, 345804, 345492, 345180, 344869, 344558, 344247, 343936, 343626, 343316, 343006, 342697, 342388,
		342079, 341770, 341462, 341154, 340846, 340539, 340231, 339924, 339618, 339311, 339005, 338700, 338394, 338089, 337784, 337479,
		337175, 336870, 336566, 336263, 335959, 335656, 335354, 335051, 334749, 334447, 334145, 333844, 333542, 333242, 332941, 332641,
		332341, 332041, 331741, 331442, 331143, 330844, 330546, 330247, 329950, 329652, 329355, 329057, 328761, 328464, 328168, 327872,
		327576, 327280, 326985, 326690, 326395, 326101, 325807, 325513, 325219, 324926, 324633, 324340, 324047, 323755, 323463, 323171,
		322879, 322588, 322297, 322006, 321716, 321426, 321136, 320846, 320557, 320267, 319978, 319690, 319401, 319113, 318825, 318538,
		318250, 317963, 317676, 317390, 317103, 316817, 316532, 316246, 315961, 315676, 315391, 315106, 314822, 314538, 314254, 313971,
		313688, 313405, 313122, 312839, 312557, 312275, 311994, 311712, 311431, 311150, 310869, 310589, 310309, 310029, 309749, 309470,
		309190, 308911, 308633, 308354, 308076, 307798, 307521, 307243, 306966, 306689, 306412, 306136, 305860, 305584, 305308, 305033,
		304758, 304483, 304208, 303934, 303659, 303385, 303112, 302838, 302565, 302292, 302019, 301747, 301475, 301203, 300931, 300660,
		300388, 300117, 299847, 299576, 299306, 299036, 298766, 298497, 298227, 297958, 297689, 297421, 297153, 296884, 296617, 296349,
		296082, 295815, 295548, 295281, 295015, 294749, 294483, 294217, 293952, 293686, 293421, 293157, 292892, 292628, 292364, 292100,
		291837, 291574, 291311, 291048, 290785, 290523, 290261, 289999, 289737, 289476, 289215, 288954, 288693, 288433, 288173, 287913,
		287653, 287393, 287134, 286875, 286616, 286358, 286099, 285841, 285583, 285326, 285068, 284811, 284554, 284298, 284041, 283785,
		283529, 283273, 283017, 282762, 282507, 282252, 281998, 281743, 281489, 281235, 280981, 280728, 280475, 280222, 279969, 279716,
		279464, 279212, 278960, 278708, 278457, 278206, 277955, 277704, 277453, 277203, 276953, 276703, 276453, 276204, 275955, 275706,
		275457, 275209, 274960, 274712, 274465, 274217, 273970, 273722, 273476, 273229, 272982, 272736, 272490, 272244, 271999, 271753,
		271508, 271263, 271018, 270774, 270530, 270286, 270042, 269798, 269555, 269312, 269069, 268826, 268583, 268341, 268099, 267857
	};
	/**
	 * PT2/FT2 sine table
	 */
	public static final int [] ModVibratoTable =
	{
		   0,   24,   49,   74,   97,  120,  141,  161,  180,  197,  212,  224,  235,  244,  250,  253,
		 255,  253,  250,  244,  235,  224,  212,  197,  180,  161,  141,  120,   97,   74,   49,   24,
	};
//	/**
//	 * OMPT Random table - is used with OPMT files only!
//	 */
//	public static final int [] ModRandomTable =
//	{
//		   98, -127,  -43,   88,  102,   41,  -65,  -94,  125,   20,  -71,  -86,  -70,  -32,  -16,  -96,
//		   17,   72,  107,   -5,  116,  -69,  -62,  -40,   10,  -61,   65,  109,  -18,  -38,  -13,  -76,
//		  -23,   88,   21,  -94,    8,  106,   21, -112,    6,  109,   20,  -88,  -30,    9, -127,  118,
//		   42,  -34,   89,   -4,  -51,  -72,   21,  -29,  112,  123,   84, -101,  -92,   98,  -54,  -95
//	};
	/**
	 * FT2 Auto Vibrato
	 */
	public static final int [] XMAutoVibSineTab =
	{
		  0,  -2,  -3,  -5,  -6,  -8,  -9, -11, -12, -14, -16, -17, -19, -20, -22, -23,
		-24, -26, -27, -29, -30, -32, -33, -34, -36, -37, -38, -39, -41, -42, -43, -44,
		-45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -56, -57, -58, -59,
		-59, -60, -60, -61, -61, -62, -62, -62, -63, -63, -63, -64, -64, -64, -64, -64,
		-64, -64, -64, -64, -64, -64, -63, -63, -63, -62, -62, -62, -61, -61, -60, -60,
		-59, -59, -58, -57, -56, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -46,
		-45, -44, -43, -42, -41, -39, -38, -37, -36, -34, -33, -32, -30, -29, -27, -26,
		-24, -23, -22, -20, -19, -17, -16, -14, -12, -11,  -9,  -8,  -6,  -5,  -3,  -2,
		  0,   2,   3,   5,   6,   8,   9,  11,  12,  14,  16,  17,  19,  20,  22,  23,
		 24,  26,  27,  29,  30,  32,  33,  34,  36,  37,  38,  39,  41,  42,  43,  44,
		 45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,  56,  57,  58,  59,
		 59,  60,  60,  61,  61,  62,  62,  62,  63,  63,  63,  64,  64,  64,  64,  64,
		 64,  64,  64,  64,  64,  64,  63,  63,  63,  62,  62,  62,  61,  61,  60,  60,
		 59,  59,  58,  57,  56,  56,  55,  54,  53,  52,  51,  50,  49,  48,  47,  46,
		 45,  44,  43,  42,  41,  39,  38,  37,  36,  34,  33,  32,  30,  29,  27,  26,
		 24,  23,  22,  20,  19,  17,  16,  14,  12,  11,   9,   8,   6,   5,   3,   2
	};
	/**
	 * FT2's square root panning law LUT.
	 * Formula to generate this table: round(65536 * sqrt(n / 256))
	 */
	public static final int [] XMPanningTable =
	{
			0,  4096,  5793,  7094,  8192,  9159, 10033, 10837, 11585, 12288, 12953, 13585, 14189, 14768, 15326, 15864,
		16384, 16888, 17378, 17854, 18318, 18770, 19212, 19644, 20066, 20480, 20886, 21283, 21674, 22058, 22435, 22806,
		23170, 23530, 23884, 24232, 24576, 24915, 25249, 25580, 25905, 26227, 26545, 26859, 27170, 27477, 27780, 28081,
		28378, 28672, 28963, 29251, 29537, 29819, 30099, 30377, 30652, 30924, 31194, 31462, 31727, 31991, 32252, 32511,
		32768, 33023, 33276, 33527, 33776, 34024, 34270, 34514, 34756, 34996, 35235, 35472, 35708, 35942, 36175, 36406,
		36636, 36864, 37091, 37316, 37540, 37763, 37985, 38205, 38424, 38642, 38858, 39073, 39287, 39500, 39712, 39923,
		40132, 40341, 40548, 40755, 40960, 41164, 41368, 41570, 41771, 41972, 42171, 42369, 42567, 42763, 42959, 43154,
		43348, 43541, 43733, 43925, 44115, 44305, 44494, 44682, 44869, 45056, 45242, 45427, 45611, 45795, 45977, 46160,
		46341, 46522, 46702, 46881, 47059, 47237, 47415, 47591, 47767, 47942, 48117, 48291, 48465, 48637, 48809, 48981,
		49152, 49322, 49492, 49661, 49830, 49998, 50166, 50332, 50499, 50665, 50830, 50995, 51159, 51323, 51486, 51649,
		51811, 51972, 52134, 52294, 52454, 52614, 52773, 52932, 53090, 53248, 53405, 53562, 53719, 53874, 54030, 54185,
		54340, 54494, 54647, 54801, 54954, 55106, 55258, 55410, 55561, 55712, 55862, 56012, 56162, 56311, 56459, 56608,
		56756, 56903, 57051, 57198, 57344, 57490, 57636, 57781, 57926, 58071, 58215, 58359, 58503, 58646, 58789, 58931,
		59073, 59215, 59357, 59498, 59639, 59779, 59919, 60059, 60199, 60338, 60477, 60615, 60753, 60891, 61029, 61166,
		61303, 61440, 61576, 61712, 61848, 61984, 62119, 62254, 62388, 62523, 62657, 62790, 62924, 63057, 63190, 63323,
		63455, 63587, 63719, 63850, 63982, 64113, 64243, 64374, 64504, 64634, 64763, 64893, 65022, 65151, 65279, 65408, 65536
	};
    /**
	 * Basic C4 S3M/IT
	 */
	public static final int FreqS3MTable[] =
	{
		1712, 1616, 1524, 1440, 1356, 1280, 1208, 1140, 1076, 1016,  960,  907
	};
	/**
	 * This table is used by the stm, s3m, it mods, manly for the
	 * old "fineTune" effekt as they are downward compatible
	 * calculated by 8363*2^((i-8)/(12*8))
	 */
	public static final int [] IT_fineTuneTable =
	{
		7895, 7941, 7985, 8046, 8107, 8169, 8232, 8280,
		8363, 8413, 8463, 8529, 8581, 8651, 8723, 8757
	};
	/**
	 * This is used by ImpulseTracker Arpeggios, as with Impulstracker
	 * Arpeggios are calculated on the current pitch.
	 * These are the half tone fractions 2^(halfTone/12) * HALFTONE_FAC
	 * for precision
	 * --> see also LinearSlideUpTable (index * 16), which is wrongly rounded
	 */
	public static long HALFTONE_SHIFT = 16;
	public static long HALFTONE_FAC = 1<<HALFTONE_SHIFT;
	public static final int [] halfToneTab =
	{
		65536, 61858, 58386, 55109, 52016, 49097, 46341, 43740, 
		41285, 38968, 36781, 34716, 32768, 30929, 29193, 27554	
	};
	// These tables are exactly the other way round with me than normally used. 
	// What is SlideUp is SlideDown at Schism, and vice versa.
	// This would affect Vibrato, AutoVibrato, (Fine|Extra Fine|PortaUp/Down ...
	// As we use periods instead of frequencies, that is why, and will not change
	/**
	 * Used by IT Tracker Mods if linear frequencies enabled
	 */
	public static final int [] FineLinearSlideDownTable =
	{
		65536, 65595, 65654, 65714,	65773, 65832, 65892, 65951,
		66011, 66071, 66130, 66190, 66250, 66309, 66369, 66429
	};
	/**
	 * Used by IT Tracker Mods if linear frequencies enabled
	 */
	public static final int [] FineLinearSlideUpTable =
	{
		65535, 65477, 65418, 65359, 65300, 65241, 65182, 65123,
		65065, 65006, 64947, 64889, 64830, 64772, 64713, 64655
	};
	/**
	 * Pitch Envelope Slider Table
	 */
	public static final int [] LinearSlideDownTable = 
	{
		 65536,  65773,  66011,  66250,  66489,  66730,  66971,  67213,
		 67456,  67700,  67945,  68191,  68438,  68685,  68933,  69183,
		 69433,  69684,  69936,  70189,  70443,  70698,  70953,  71210,
		 71468,  71726,  71985,  72246,  72507,  72769,  73032,  73297,
		 73562,  73828,  74095,  74363,  74632,  74902,  75172,  75444,
		 75717,  75991,  76266,  76542,  76819,  77096,  77375,  77655,
		 77936,  78218,  78501,  78785,  79069,  79355,  79642,  79930,
		 80220,  80510,  80801,  81093,  81386,  81681,  81976,  82273,
		 82570,  82869,  83169,  83469,  83771,  84074,  84378,  84683,
		 84990,  85297,  85606,  85915,  86226,  86538,  86851,  87165,
		 87480,  87796,  88114,  88433,  88752,  89073,  89396,  89719,
		 90043,  90369,  90696,  91024,  91353,  91684,  92015,  92348,
		 92682,  93017,  93354,  93691,  94030,  94370,  94711,  95054,
		 95398,  95743,  96089,  96436,  96785,  97135,  97487,  97839,
		 98193,  98548,  98905,  99262,  99621,  99982, 100343, 100706,
		101070, 101436, 101803, 102171, 102540, 102911, 103283, 103657,
		104032, 104408, 104786, 105165, 105545, 105927, 106310, 106694,
		107080, 107468, 107856, 108246, 108638, 109031, 109425, 109821,
		110218, 110617, 111017, 111418, 111821, 112226, 112631, 113039,
		113448, 113858, 114270, 114683, 115098, 115514, 115932, 116351,
		116772, 117194, 117618, 118043, 118470, 118899, 119329, 119760,
		120194, 120628, 121065, 121502, 121942, 122383, 122825, 123270,
		123715, 124163, 124612, 125063, 125515, 125969, 126425, 126882,
		127341, 127801, 128263, 128727, 129193, 129660, 130129, 130600,
		131072, 131546, 132022, 132499, 132978, 133459, 133942, 134427,
		134913, 135401, 135890, 136382, 136875, 137370, 137867, 138366,
		138866, 139368, 139872, 140378, 140886, 141395, 141907, 142420,
		142935, 143452, 143971, 144491, 145014, 145539, 146065, 146593,
		147123, 147655, 148189, 148725, 149263, 149803, 150345, 150889,
		151434, 151982, 152532, 153083, 153637, 154193, 154750, 155310,
		155872, 156435, 157001, 157569, 158139, 158711, 159285, 159861,
		160439, 161019, 161602, 162186, 162773, 163361, 163952, 164545
	};
	/**
	 * Pitch Envelope Slider Table
	 */
	public static final int [] LinearSlideUpTable = 
	{
		65536, 65300, 65065, 64830, 64596, 64364, 64132, 63901,
		63670, 63441, 63212, 62984, 62757, 62531, 62306, 62081,
		61858, 61635, 61413, 61191, 60971, 60751, 60532, 60314,
		60097, 59880, 59664, 59449, 59235, 59022, 58809, 58597,
		58386, 58176, 57966, 57757, 57549, 57341, 57135, 56929,
		56724, 56519, 56316, 56113, 55911, 55709, 55508, 55308,
		55109, 54910, 54713, 54515, 54319, 54123, 53928, 53734,
		53540, 53347, 53155, 52963, 52773, 52582, 52393, 52204,
		52016, 51829, 51642, 51456, 51270, 51085, 50901, 50718,
		50535, 50353, 50172, 49991, 49811, 49631, 49452, 49274,
		49097, 48920, 48743, 48568, 48393, 48218, 48044, 47871,
		47699, 47527, 47356, 47185, 47015, 46846, 46677, 46509,
		46341, 46174, 46008, 45842, 45677, 45512, 45348, 45185,
		45022, 44859, 44698, 44537, 44376, 44216, 44057, 43898,
		43740, 43582, 43425, 43269, 43113, 42958, 42803, 42649,
		42495, 42342, 42189, 42037, 41886, 41735, 41584, 41434,
		41285, 41136, 40988, 40840, 40693, 40547, 40400, 40255,
		40110, 39965, 39821, 39678, 39535, 39392, 39250, 39109,
		38968, 38828, 38688, 38548, 38409, 38271, 38133, 37996,
		37859, 37722, 37586, 37451, 37316, 37181, 37047, 36914,
		36781, 36648, 36516, 36385, 36254, 36123, 35993, 35863,
		35734, 35605, 35477, 35349, 35221, 35095, 34968, 34842,
		34716, 34591, 34467, 34343, 34219, 34095, 33973, 33850,
		33728, 33607, 33486, 33365, 33245, 33125, 33005, 32887,
		32768, 32650, 32532, 32415, 32298, 32182, 32066, 31950,
		31835, 31720, 31606, 31492, 31379, 31266, 31153, 31041,
		30929, 30817, 30706, 30596, 30485, 30376, 30266, 30157,
		30048, 29940, 29832, 29725, 29618, 29511, 29405, 29299,
		29193, 29088, 28983, 28879, 28774, 28671, 28567, 28464,
		28362, 28260, 28158, 28056, 27955, 27855, 27754, 27654,
		27554, 27455, 27356, 27258, 27159, 27062, 26964, 26867,
		26770, 26674, 26577, 26482, 26386, 26291, 26196, 26102
	};
	/**
	 * Impulse Tracker sine table (ITTECH.TXT)
	 */
	public static final int [] ITSinusTable =
	{
		  0,  2,  3,  5,  6,  8,  9, 11, 12, 14, 16, 17, 19, 20, 22, 23,
		 24, 26, 27, 29, 30, 32, 33, 34, 36, 37, 38, 39, 41, 42, 43, 44,
		 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59,
		 59, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 64,
		 64, 64, 64, 64, 64, 64, 63, 63, 63, 62, 62, 62, 61, 61, 60, 60,
		 59, 59, 58, 57, 56, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46,
		 45, 44, 43, 42, 41, 39, 38, 37, 36, 34, 33, 32, 30, 29, 27, 26,
		 24, 23, 22, 20, 19, 17, 16, 14, 12, 11,  9,  8,  6,  5,  3,  2,
		  0, -2, -3, -5, -6, -8, -9,-11,-12,-14,-16,-17,-19,-20,-22,-23,
		-24,-26,-27,-29,-30,-32,-33,-34,-36,-37,-38,-39,-41,-42,-43,-44,
		-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-56,-57,-58,-59,
		-59,-60,-60,-61,-61,-62,-62,-62,-63,-63,-63,-64,-64,-64,-64,-64,
		-64,-64,-64,-64,-64,-64,-63,-63,-63,-62,-62,-62,-61,-61,-60,-60,
		-59,-59,-58,-57,-56,-56,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,
		-45,-44,-43,-42,-41,-39,-38,-37,-36,-34,-33,-32,-30,-29,-27,-26,
		-24,-23,-22,-20,-19,-17,-16,-14,-12,-11, -9, -8, -6, -5, -3, -2
	};
	/**
	 * Impulse Tracker ramp down table
	 */
	public static final int [] ITRampDownTable =
	{
		 64, 63, 63, 62, 62, 61, 61, 60, 60, 59, 59, 58, 58, 57, 57, 56,
		 56, 55, 55, 54, 54, 53, 53, 52, 52, 51, 51, 50, 50, 49, 49, 48,
		 48, 47, 47, 46, 46, 45, 45, 44, 44, 43, 43, 42, 42, 41, 41, 40,
		 40, 39, 39, 38, 38, 37, 37, 36, 36, 35, 35, 34, 34, 33, 33, 32,
		 32, 31, 31, 30, 30, 29, 29, 28, 28, 27, 27, 26, 26, 25, 25, 24,
		 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 17, 17, 16,
		 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10,  9,  9,  8,
		  8,  7,  7,  6,  6,  5,  5,  4,  4,  3,  3,  2,  2,  1,  1,  0,
		  0, -1, -1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8,
		 -8, -9, -9,-10,-10,-11,-11,-12,-12,-13,-13,-14,-14,-15,-15,-16,
		-16,-17,-17,-18,-18,-19,-19,-20,-20,-21,-21,-22,-22,-23,-23,-24,
		-24,-25,-25,-26,-26,-27,-27,-28,-28,-29,-29,-30,-30,-31,-31,-32,
		-32,-33,-33,-34,-34,-35,-35,-36,-36,-37,-37,-38,-38,-39,-39,-40,
		-40,-41,-41,-42,-42,-43,-43,-44,-44,-45,-45,-46,-46,-47,-47,-48,
		-48,-49,-49,-50,-50,-51,-51,-52,-52,-53,-53,-54,-54,-55,-55,-56,
		-56,-57,-57,-58,-58,-59,-59,-60,-60,-61,-61,-62,-62,-63,-63,-64
	};
	/**
	 * Impulse Tracker Square table
	 */
	public static final int [] ITSquareTable =
	{
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
		 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
	};
	/**
	 *  LUT for 2 * damping factor
	 */
	public static double ResonanceTable[] =
	{
		1.0000000000000000d, 0.9786446094512940d, 0.9577452540397644d, 0.9372922182083130d,
		0.9172759056091309d, 0.8976871371269226d, 0.8785166740417481d, 0.8597555756568909d,
		0.8413951396942139d, 0.8234267830848694d, 0.8058421611785889d, 0.7886331081390381d,
		0.7717915177345276d, 0.7553095817565918d, 0.7391796708106995d, 0.7233941555023193d,
		0.7079457640647888d, 0.6928272843360901d, 0.6780316829681397d, 0.6635520458221436d,
		0.6493816375732422d, 0.6355138421058655d, 0.6219421625137329d, 0.6086603403091431d,
		0.5956621170043945d, 0.5829415321350098d, 0.5704925656318665d, 0.5583094954490662d,
		0.5463865399360657d, 0.5347182154655457d, 0.5232990980148315d, 0.5121238231658936d,
		0.5011872053146362d, 0.4904841780662537d, 0.4800096750259399d, 0.4697588682174683d,
		0.4597269892692566d, 0.4499093294143677d, 0.4403013288974762d, 0.4308985173702240d,
		0.4216965138912201d, 0.4126909971237183d, 0.4038778245449066d, 0.3952528536319733d,
		0.3868120610713959d, 0.3785515129566193d, 0.3704673945903778d, 0.3625559210777283d,
		0.3548133969306946d, 0.3472362160682678d, 0.3398208320140839d, 0.3325638175010681d,
		0.3254617750644684d, 0.3185114264488220d, 0.3117094635963440d, 0.3050527870655060d,
		0.2985382676124573d, 0.2921628654003143d, 0.2859236001968384d, 0.2798175811767578d,
		0.2738419771194458d, 0.2679939568042755d, 0.2622708380222321d, 0.2566699385643005d,
		0.2511886358261108d, 0.2458244115114212d, 0.2405747324228287d, 0.2354371547698975d,
		0.2304092943668366d, 0.2254888117313385d, 0.2206734120845795d, 0.2159608304500580d,
		0.2113489061594009d, 0.2068354636430740d, 0.2024184018373489d, 0.1980956792831421d,
		0.1938652694225311d, 0.1897251904010773d, 0.1856735348701477d, 0.1817083954811096d,
		0.1778279393911362d, 0.1740303486585617d, 0.1703138649463654d, 0.1666767448186874d,
		0.1631172895431519d, 0.1596338599920273d, 0.1562248021364212d, 0.1528885662555695d,
		0.1496235728263855d, 0.1464282870292664d, 0.1433012634515762d, 0.1402409970760346d,
		0.1372461020946503d, 0.1343151479959488d, 0.1314467936754227d, 0.1286396980285645d,
		0.1258925348520279d, 0.1232040524482727d, 0.1205729842185974d, 0.1179980933666229d,
		0.1154781952500343d, 0.1130121126770973d, 0.1105986908078194d, 0.1082368120551109d,
		0.1059253737330437d, 0.1036632955074310d, 0.1014495193958283d, 0.0992830246686935d,
		0.0971627980470657d, 0.0950878411531448d, 0.0930572077631950d, 0.0910699293017387d,
		0.0891250967979431d, 0.0872217938303947d, 0.0853591337800026d, 0.0835362523794174d,
		0.0817523002624512d, 0.0800064504146576d, 0.0782978758215904d, 0.0766257941722870d,
		0.0749894231557846d, 0.0733879879117012d, 0.0718207582831383d, 0.0702869966626167d,
		0.0687859877943993d, 0.0673170387744904d, 0.0658794566988945d, 0.0644725710153580d
	};
	/**
	 * Translation for porta2note speed - 10 values
	 */
	public static final int IT_VolColumnPortaNoteSpeedTranslation[] =
	{
	 	0x00, 0x01, 0x04, 0x08, 0x10, 0x20, 0x40, 0x60, 0x80, 0xFF
	};
	/**
	 * For the patterndisplay: retrieve a String for the given note index
	 * @param index
	 * @return
	 */
	public static String getNoteNameForIndex(final int index)
	{
		switch (index)
		{
			case NO_NOTE:	return "...";	// No Note
			case KEY_OFF:	return "===";	// Key Off
			case NOTE_CUT:	return "^^^";	// Note cut value
			case NOTE_FADE:	return "~~~";	// Note Fade value
			default:		return ((new StringBuilder(noteStrings[(index-1)%12])).append((index-1)/12)).toString();
		}
	}
	/**
	 * get the index for the note
	 * @param period
	 * @return
	 */
	public static int getNoteIndexForPeriod(final int period)
	{
		// do not mangle with those values:
		switch (period)
		{
			case NO_NOTE:					// No Note
			case KEY_OFF:					// Key Off
			case NOTE_CUT:					// Note cut value
			case NOTE_FADE:	return period;	// Note Fade value
		}

		int i=0;
		while (i<noteValues.length && period<noteValues[i]) i++;
		if (i>=noteValues.length)
			return 0;
		else
			return i;
	}
    /**
     * Used by getAsHex
     */
	public static final char[] numbers = 
	{
		'0', '1', '2', '3', '4', 
		'5', '6', '7', '8', '9',
		'A', 'B', 'C', 'D', 'E',
		'F'
	};
	/**
	 * Displays a value as a hex-value, using #digits. If the digits are not
	 * sufficient, the number is cut!
	 * @param value
	 * @param digits
	 * @return
	 */
	public static String getAsHex(final int value, final int digits)
	{
		StringBuilder result = new StringBuilder();
		for (int shift=(digits-1)<<2; shift>=0; shift-=4)
			result.append(numbers[(value>>shift)&0xF]);
		return result.toString();
	}
	/**
	 * Displays a value as a hex-value, using #digits. If the digits are not
	 * sufficient, the number is cut!
	 * @param value
	 * @param digits
	 * @return
	 */
	public static String getAsHex(final long value, final int digits)
	{
		StringBuilder result = new StringBuilder();
		for (int shift=(digits-1)<<2; shift>=0; shift-=4)
			result.append(numbers[(int)(value>>shift)&0xF]);
		return result.toString();
//		Old standard way, much slower, much more fail safe.		
//		final String hex = Integer.toHexString(value).toUpperCase();
//		final int zeros = digits - hex.length();
//		for (int i=0; i<zeros; i++) result.append('0');
//		return (result.append(hex)).toString();
	}
	/**
	 * Our standard Date formatter
	 */
	public static final DateTimeFormatter DATE_FORMATER = DateTimeFormatter.ofPattern("yyyy-MM-dd");
	/**
	 * convert the ModPlug version information to a readable string
	 * @param version
	 * @return
	 */
	public static String getModPlugVersionString(final int version)
	{
		if (version==0) return "Unknown";
		if ((version&0xFFFF)==0) return String.format("%x.%02x", Integer.valueOf((version>>24)&0xFF), Integer.valueOf((version>>16)&0xFF));
		return String.format("%x.%02x.%02x.%02x", Integer.valueOf((version>>24)&0xFF), Integer.valueOf((version>>16)&0xFF), Integer.valueOf((version>>8)&0xFF), Integer.valueOf(version&0xFF));
	}
	/**
	 * convert the Schism version information to a readable string
	 * @since 19.07.2024
	 * @param version
	 * @return
	 */
	public static String getSchismVersionString(final int version)
	{
		final int cwtv = (version>>16) & 0xFFF;
		final int extVersion = version&0xFFFF;
		if (cwtv>0x50)
		{
			// version is days from 2009-10-31
			LocalDate d = LocalDate.of(2009, 10, 31);
			if (cwtv<0xFFF)
				d = d.plusDays(cwtv-0x50);
			else
				d = d.plusDays(extVersion);
			return DATE_FORMATER.format(d);
		}
		return String.format("0.%x", Integer.valueOf(cwtv));
	}
//	private static final int ST2TempoFactor[] = { 140, 50, 25, 15, 10, 7, 6, 4, 3, 3, 2, 2, 2, 2, 1, 1 };
//	private static final int st2MixingRate = 23863; // Highest possible setting in ST2
//	public static int convertST2tempo(final int tempo)
//	{
//		// This underflows at tempo 06...0F, and the resulting tick lengths depend on the mixing rate.
//		// Note: ST2.3 uses the constant 50 below, earlier versions use 49 but they also play samples at a different speed.
//		int samplesPerTick = st2MixingRate / (50 - ((ST2TempoFactor[tempo >> 4] * (tempo & 0x0F)) >> 4));
//		if(samplesPerTick <= 0)
//			samplesPerTick += 65536;
//		return (st2MixingRate<<5)/(samplesPerTick<<2);
//	}
	private static final int st2_tempo_table[][] = 
	{
	  	{ 125,  117,  110,  102,   95,   87,   80,   72,   62,   55,   47,   40,   32,   25,   17,   10, },
	  	{ 125,  122,  117,  115,  110,  107,  102,  100,   95,   90,   87,   82,   80,   75,   72,   67, },
	  	{ 125,  125,  122,  120,  117,  115,  112,  110,  107,  105,  102,  100,   97,   95,   92,   90, },
	  	{ 125,  125,  122,  122,  120,  117,  117,  115,  112,  112,  110,  110,  107,  105,  105,  102, },
	  	{ 125,  125,  125,  122,  122,  120,  120,  117,  117,  117,  115,  115,  112,  112,  110,  110, },
	  	{ 125,  125,  125,  122,  122,  122,  120,  120,  117,  117,  117,  115,  115,  115,  112,  112, },
	  	{ 125,  125,  125,  125,  122,  122,  122,  122,  120,  120,  120,  120,  117,  117,  117,  117, },
	  	{ 125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  120,  120,  120,  120,  120, },
	  	{ 125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  120,  120,  120,  120,  120, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  122,  122,  122, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  122,  122,  122, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  122,  122,  122, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  122,  122,  122,  122,  122,  122,  122,  122, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125, },
	  	{ 125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125,  125, },
	};
	public static int convertST2tempo(final int tempo)
	{
		final int tpr = ((tempo>>4)!=0)?(tempo>>4):1;
		final int scale = tempo&0xF;
		return st2_tempo_table[tpr-1][scale];
	}


	// Conversions for read bytes! *********************************************
//	/**
//	 * Converts an Intel like stored word to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntelWordToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8);
//	}
//	/**
//	 * Converts an Intel like stored 3 Byte  to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntel3ByteToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16);
//	}
//	/**
//	 * Converts an Intel like stored dword to an integer (less significant byte first)
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertIntelDWordToInt(final byte[] buf, final int offset)
//	{
//		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16) | ((buf[offset+3]&0xFF)<<24);
//	}
//	/**
//	 * Converts an Motorola 86000er word to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convertWordToInt(final byte[] buf, final int offset)
//	{
//		return ((buf[offset]&0xFF)<<8) | (buf[offset+1]&0xFF);
//	}
//	/**
//	 * Converts an Motorola 86000er 3 Byte to an integer
//	 * @param buf
//	 * @param offset
//	 * @return
//	 */
//	public static int convert3ByteToInt(final byte[] buf, final int offset)
//	{
//		return ((buf[offset]&0xFF)<<16) | ((buf[offset+1]&0xFF)<<8) | (buf[offset+2]&0xFF);
//	}
	/**
	 * Converts an intel dword array to an integer (most significant byte first)
	 * @param buf
	 * @param offset
	 * @return
	 */
	public static int convertDWordToInt(final byte[] buf, final int offset)
	{
		return (buf[offset]&0xFF) | ((buf[offset+1]&0xFF)<<8) | ((buf[offset+2]&0xFF)<<16) | ((buf[offset+3]&0xFF)<<24);
	}

	// Conversions for sample data! ********************************************
//	/**
//	 * converts signed 8 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned8BitToSigned16Bit(final long sample)
//	{
//		return sample<<8;
//	}
//	/**
//	 * converts signed 8 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned8BitToSigned24Bit(final long sample)
//	{
//		return sample<<16;
//	}
	/**
	 * converts signed 8 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteSigned8BitToSigned32Bit(final long sample)
	{
		return sample<<24;
	}
//	/**
//	 * converts signed 16 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned16BitToSigned24Bit(final long sample)
//	{
//		return sample<<8;
//	}
	/**
	 * converts signed 16 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteSigned16BitToSigned32Bit(final long sample)
	{
		return sample<<16;
	}
//	/**
//	 * converts unsigned 8 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned8BitToSigned16Bit(final long sample)
//	{
//		return (((sample)&0xFF)-0x80)<<8;
//	}
//	/**
//	 * converts unsigned 16 bit values to signed 16 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned16BitToSigned16Bit(final long sample)
//	{
//		return (sample&0xFFFF)-0x8000;
//	}
//	/**
//	 * converts unsigned 8 bit values to signed 24 bit
//	 * @since 26.05.2006
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned8BitToSigned24Bit(final long sample)
//	{
//		return (((sample)&0xFF)-0x80)<<16;
//	}
//	/**
//	 * converts unsigned 16 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned16BitToSigned24Bit(final long sample)
//	{
//		return ((sample&0xFFFF)-0x8000)<<8;
//	}
	/**
	 * converts unsigned 8 bit values to signed 32 bit
	 * @since 26.05.2006
	 * @param sample
	 * @return
	 */
	public static long promoteUnsigned8BitToSigned32Bit(final long sample)
	{
		return (((sample)&0xFF)-0x80)<<24;
	}
	/**
	 * converts unsigned 16 bit values to signed 32 bit
	 * @param sample
	 * @return
	 */
	public static long promoteUnsigned16BitToSigned32Bit(final long sample)
	{
		return ((sample&0xFFFF)-0x8000)<<16;
	}
//	/**
//	 * converts unsigned 24 bit values to signed 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned24BitToSigned24Bit(final long sample)
//	{
//		return (sample&0xFFFFFF)-0x800000;
//	}
//	/**
//	 * converts signed 16 bit values to unsigned 8 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned16BitToUnsigned8Bit(final long sample)
//	{
//		return ((sample>>8)+0x80)&0xFF;
//	}
//	/**
//	 * converts signed 24 bit values to unsigned 24 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned24BitToUnsigned24Bit(final long sample)
//	{
//		return (sample+0x800000)&0xFFFFFF;
//	}
//	/**
//	 * converts unsigned 32 bit values to signed 32 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteUnsigned32BitToSigned32Bit(final long sample)
//	{
//		return (sample&0xFFFFFFFF)-0x80000000;
//	}
//	/**
//	 * converts signed 32 bit values to unsigned 32 bit
//	 * @param sample
//	 * @return
//	 */
//	public static long promoteSigned32BitToUnsigned32Bit(final long sample)
//	{
//		return (sample+0x80000000)&0xFFFFFFFF;
//	}
}